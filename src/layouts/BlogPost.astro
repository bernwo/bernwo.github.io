---
import type { CollectionEntry } from "astro:content";

import BaseLayout from "./Base.astro";
import BlogHero from "@/components/blog/Hero";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const {
	data: { title, description, ogImage, publishDate },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = publishDate.toISOString();
const { headings } = await post.render();
---

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);

	// Script for dynamic highlighting of table of contents. Modified from https://stackoverflow.com/a/75346369/15587966.
	const anchors: NodeListOf<Element> = document.querySelectorAll("h2:not(.table-of-contents-blogpost)");
	const links: NodeListOf<Element> = document.querySelectorAll('aside.table-of-contents-blogpost > ul > li > a');
	window.addEventListener('DOMContentLoaded', () => {
		window.addEventListener('scroll', () => {
			if (typeof(anchors) != 'undefined' && anchors != null && typeof(links) != 'undefined' && links != null) {
				let scrollTop = window.scrollY;
				// highlight the last scrolled-to: set everything inactive first
				links.forEach((link, _) => {
					link.classList.remove("section-scroll-active");
				});
				
				// then iterate backwards, on the first match highlight it and break
				for (let i = anchors.length-1; i >= 0; i--) {
					// @ts-ignore: Object is possibly 'null'.
					if (scrollTop > anchors[i].offsetTop - 100) {
						// @ts-ignore: Object is possibly 'null'.
						links[i].classList.add('section-scroll-active');
						break;
					}
				}
			}
		})
	});

	// Anchor resolving function. 
	(function(document, history, location) {
		let HISTORY_SUPPORT = !!(history && history.pushState);

		let anchorScrolls = {
			ANCHOR_REGEX: /^#[^ ]+$/,
			// ANCHOR_REGEX: /^#[^\s]+$/,
			// ANCHOR_REGEX: /^#[0-9%:a-z,A-Z-]+$/,
			OFFSET_HEIGHT_PX: 95,

			/**
			 * Establish events, and fix initial scroll position if a hash is provided.
			 */
			init: function() {
				this.scrollToCurrent();
				window.addEventListener('hashchange', this.scrollToCurrent.bind(this));
				document.body.addEventListener('click', this.delegateAnchors.bind(this));
			},

			/**
			 * Return the offset amount to deduct from the normal scroll position.
			 * Modify as appropriate to allow for dynamic calculations
			 */
			getFixedOffset: function() {
				return this.OFFSET_HEIGHT_PX;
			},

			/**
			 * If the provided href is an anchor which resolves to an element on the
			 * page, scroll to it.
			 * @param  {String} href
			 * @return {Boolean} - Was the href an anchor.
			 */
			scrollIfAnchor: function(href: string, pushToHistory: boolean) {
				let match, rect, anchorOffset;

				if(!this.ANCHOR_REGEX.test(href)) {
					return false;
				}

				match = document.getElementById(href.slice(1));

				if(match) {
					rect = match.getBoundingClientRect();
					anchorOffset = window.pageYOffset + rect.top - this.getFixedOffset();
					window.scrollTo(window.pageXOffset, anchorOffset);

					// Add the state to history as-per normal anchor links
					if(HISTORY_SUPPORT && pushToHistory) {
						history.pushState({}, document.title, location.pathname + href);
					}
				}

				return !!match;
			},

			/**
			 * Attempt to scroll to the current location's hash.
			 */
			scrollToCurrent: function() {
				this.scrollIfAnchor(window.location.hash, false);
			},

			/**
			 * If the click event's target was an anchor, fix the scroll position.
			 */
			delegateAnchors: function(e: any) {
				let elem = e.target;
				if(elem.nodeName === 'A' && !elem.className.includes("nav-anchor")) {
					this.scrollIfAnchor(elem.getAttribute('href'), true) // For normal anchors
					e.preventDefault();
				} else if (elem.nodeName === 'MJX-C') {
					this.scrollIfAnchor(decodeURIComponent(elem.parentNode.parentNode.parentNode.getAttribute('href')), true); // Special case for MathJax anchors
					e.preventDefault();
				}
			}
		};

		window.addEventListener(
			'DOMContentLoaded', anchorScrolls.init.bind(anchorScrolls)
		);
	})(window.document, window.history, window.location);
</script>

<BaseLayout meta={{ title, description, articleDate, ogImage: socialImage }}>
	<div class="gap-x-10 lg:flex lg:items-start">
		{
			!!headings.length && (
				<aside class="table-of-contents-blogpost sticky top-28 mt-10 order-2 -mr-0 hidden basis-72 lg:block">
					<h2 class="table-of-contents-blogpost font-semibold">Table of Contents</h2>
					<ul class="mt-4 text-xs">
						{headings.map(({ depth, slug, text }) => (
							<li class="line-clamp-2 hover:text-accent">
								<a
									class={`block ${depth <= 2 ? "mt-3" : "mt-2 pl-3 text-[0.6875rem]"}`}
									href={`#${slug}`}
									aria-label={`Scroll to section: ${text}`}
								>
									<span>{(depth == 1)||(depth == 2)?"ยง":""}</span> {text}
								</a>
							</li>
						))}
					</ul>
				</aside>
			)
		}
		<article class="flex-grow break-words">
			<div id="blog-hero"><BlogHero content={post} /></div>
			<div
				class="prose flex-none flex-col sm:flex max-w-5xl prose-base prose-cactus mt-12 prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ml-4 prose-headings:before:text-accent prose-headings:before:content-['ยง'] prose-th:before:content-none"
			>
				<slot />
			</div>
		</article>
	</div>
	<button
		id="to-top-btn"
		class="z-90 fixed bottom-8 right-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:right-8 sm:h-12 sm:w-12 shadow-wo"
		aria-label="Back to Top"
		data-show="false"
		><svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>
</BaseLayout>

